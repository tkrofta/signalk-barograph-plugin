from(bucket: "signalk_metrics")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "temperature")
  |> filter(fn: (r) => r["_field"] == "value")
  |> filter(fn: (r) => r["environment"] == "outside")
  |> map(fn: (r) => ({ r with _value: r._value -273.15}))
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "outside")

from(bucket: "signalk_metrics")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "temperature")
  |> filter(fn: (r) => r["_field"] == "minimum")
  |> filter(fn: (r) => r["environment"] == "forecast")
  |> map(fn: (r) => ({ r with _value: r._value -273.15}))
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "min")

  from(bucket: "signalk_metrics")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "temperature")
  |> filter(fn: (r) => r["_field"] == "maximum")
  |> filter(fn: (r) => r["environment"] == "forecast")
  |> map(fn: (r) => ({ r with _value: r._value -273.15}))
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "max")

  from(bucket: "signalk_metrics")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "temperature")
  |> filter(fn: (r) => r["_field"] == "value")
  |> filter(fn: (r) => r["environment"] == "inside")
  |> map(fn: (r) => ({ r with _value: r._value -273.15}))
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "inside")

from(bucket: "signalk_weather")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "time")
  |> filter(fn: (r) => r["_field"] == "sunrise")
  |> map(fn: (r) => ({ r with _value: r._value * 1000.0}))
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "sunrise")

from(bucket: "signalk_weather")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "time")
  |> filter(fn: (r) => r["_field"] == "sunrise")
  |> map(fn: (r) => ({ r with _value: r._value * 1000.0}))
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "sunrise")

from(bucket: "signalk_metrics")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "description")
  |> filter(fn: (r) => r["_field"] == "value")
  |> aggregateWindow(every: 2d, fn: last, createEmpty: false)
  |> yield(name: "last")

from(bucket:"signalk_weather")
  |> range(start: -15m)
  |> filter(fn: (r) => r["environment"] == "cpu")
  |> filter(fn: (r) =>
    r._measurement == "temperature" and
    r._field == "average"
  )
  |> map(fn: (r) => ({ r with _value: r._value -273.15}))
  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
  |> yield(name: "Temperature")

from(bucket: "signalk_metrics")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "weather")
  |> filter(fn: (r) => r["_field"] == "uvindex" )
  |> aggregateWindow(every: 2d, fn: last, createEmpty: false)
  |> yield(name: "uvindex")



from(bucket:"signalk_weather")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["environment"] == "forecast")
  |> filter(fn: (r) => r._measurement == "temperature")
  |> filter(fn: (r) => r["_field"] == "feelslike" or r["_field"] == "maximum" or r["_field"] == "minimum")
  |> map(fn: (r) => ({ r with _value: r._value -273.15}))
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "Forecast")
from(bucket:"signalk_weather")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["environment"] != "forecast" and r["environment"] != "cpu")
  |> filter(fn: (r) =>
    r._measurement == "temperature" and
    r._field == "average"
  )
  |> map(fn: (r) => ({ r with _value: r._value -273.15}))
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "Temperature")

from(bucket:"signalk_weather")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "pressure")
  |> filter(fn: (r) => r["_field"] == "average")
  |> map(fn: (r) => ({ r with _value: r._value / 100.0 }))
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "Pressure")
from(bucket: "signalk_weather")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "pressure")
  |> filter(fn: (r) => r["environment"] == "outside")
  |> filter(fn: (r) => r["_field"] == "minimum" or r["_field"] == "maximum")
  |> map(fn: (r) => ({ r with _value: r._value / 100.0 }))
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")

from(bucket:"signalk_metrics")
  |> range(start:  -3h, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "pressure")
  |> filter(fn: (r) => r["environment"] != "forecast")
  |> filter(fn: (r) => r["_field"] == "value")
  |> map(fn: (r) => ({ r with _value: r._value / 100.0 }))
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "Pressure")

from(bucket:"signalk_weather")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "humidity")
  |> filter(fn: (r) => r["_field"] == "average")
  |> map(fn: (r) => ({ r with _value: r._value * 100.0 }))
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "Humidity")
from(bucket: "signalk_weather")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "humidity")
  |> filter(fn: (r) => r["environment"] == "outside" or r["environment"] == "inside")
  |> filter(fn: (r) => r["_field"] == "minimum" or r["_field"] == "maximum")
  |> map(fn: (r) => ({ r with _value: r._value * 100.0 }))
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")
